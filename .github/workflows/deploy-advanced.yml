name: Advanced CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  DOCKER_IMAGE: mypetsvoice/app

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov
    
    - name: Run tests with coverage
      env:
        DATABASE_URL: postgresql://postgres:test@localhost:5432/test_db
      run: |
        python -m pytest test/ -v --cov=app --cov-report=xml || echo "No tests found"
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ env.DOCKER_IMAGE }}:latest
          ${{ env.DOCKER_IMAGE }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    needs: [test, build]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Deploy to EC2
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          cd ~/my-pets-voice
          
          # 백업 생성
          sudo docker compose -f docker-compose.aws.yml ps > deployment_backup.log
          
          # 최신 코드 가져오기
          git pull origin main
          
          # 헬스체크 함수
          health_check() {
            for i in {1..30}; do
              if curl -f http://localhost/ > /dev/null 2>&1; then
                echo "✅ Health check passed"
                return 0
              fi
              echo "⏳ Waiting for application to start... ($i/30)"
              sleep 10
            done
            echo "❌ Health check failed"
            return 1
          }
          
          # 무중단 배포
          echo "🚀 Starting zero-downtime deployment..."
          
          # 새 이미지로 업데이트
          sudo docker compose -f docker-compose.aws.yml pull
          sudo docker compose -f docker-compose.aws.yml up -d --no-deps web
          
          # 헬스체크
          if health_check; then
            echo "✅ Deployment completed successfully!"
            
            # 이전 이미지 정리
            sudo docker image prune -f
          else
            echo "❌ Deployment failed, rolling back..."
            sudo docker compose -f docker-compose.aws.yml restart web
            exit 1
          fi

  notify:
    needs: [deploy]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Notify deployment status
      run: |
        if [ "${{ needs.deploy.result }}" == "success" ]; then
          echo "🎉 Deployment successful!"
        else
          echo "💥 Deployment failed!"
        fi